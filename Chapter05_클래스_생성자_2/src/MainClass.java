
/*
 * 	자바 기본 문법
 * 		1. 데이터형(메모리 크기)
 * 			1) 기본형
 * 			2) 참조형(클래스/배열)
 * 		2. 클래스
 * 			1) 데이터만 모아서 관리 : 변수만 모아서 처리
 * 				=> 초기화
 * 					· 명시적 초기화
 * 					· 초기화 블록
 * 					· 생성자 => 가장 많이 사용
 * 			2) 메소드만 모아서 관리 : 
 * 				- 클래스의 구성
 * 					class ClassName
 * 					{
 * 						<데이터 저장 공간(변수)> : 멤버 변수(프로그램 종료시까지 유지) => 지역변수보다 편하게 작업 가능, 다른 클래스에서도 사용 가능
 * 							· 인스턴스 변수 : 데이터형 변수명; => new를 이용할 때마다 메모리에 저장 => 메모리 공간이 따로 생성됨
 * 							· 공유 변수 : static 데이터형 변수명; => 컴파일러에 의해 자동 생성 => 메모리 공간을 1개만 사용
 * 						--------------------------------------------------------------------------------
 * 						<생성자> : 변수에 대한 초기화
 * 							· 클래스 영역에서는 선언만 가능
 * 							· 클래스명과 동일한 특징
 * 							· 리턴형이 없음
 * 							· 같은 이름으로 여러 개 사용(오버로딩) => 중복 함수 정의(기술 면접 단골 문제)
 * 							· new, add
 * 							· 메소드명이 동일
 * 							· 매개변수의 개수나 데이터형이 다름
 * 							· 리턴형은 관계 없음
 * 								예)
 * 									A() => A()
 * 									A(int a, int b) => A(int, int)
 * 									A(String s, double d) => A(String)
 * 									*** A(int c, int d) => A(int, int)
 * 									=> 실제 메소드에도 적용
 * 									*** void도 리턴형임 => 일반 변수
 * 							
 * 							<기타> : 생성자를 사용하지 않고 초기화 하는 방법
 * 								= 인스턴스 블록
 * 									{
 * 										구현 => 변수의 초기화
 * 									}
 * 									=> 생성자
 * 								
 * 								= 정적 블록
 * 									static
 * 									{
 * 										구현 => static에 대한 초기화
 * 									}
 * 							
 * 								예)
 * 									class A
 * 									{
 * 										int[] arr=new int[5];
 * 										A()
 * 										{
 * 											
 * 										}
 * 									}
 * 									A a=new A(); => arr 저장
 * 								
 * 									class A
 * 									{
 * 										static int[] arr=new int[5];
 * 
 * 										static
 * 										{
 * 											초기화 => 자동
 * 										}
 * 									}
 * 
 * 									A.arr // 호출
 * 									----------
 * 									멤버 메소드
 * 										= static 메소드 => 메모리가 
 * 											static 리턴형 메소드(매개변수 목록)
 * 											{
 * 												
 * 											}	
 * 										= 인스턴스 메소드 => 따로 생성
 * 											리턴형 메소드(매개변수 목록)
 * 											{
 * 												
 * 											}
 * 									----------	
 * 									
 * 					}
 * 
 */

/*
 *  생성자 => 오라클 연동(데이터가 저장된 장소)
 *  윈도우 초기화 => 시작과 레아이웃
 *  서버 연결, 서버 구동
 *  
 *  	메소드 : 인스턴스 메소드 : new를 이용해 메모리에 저장할 때마다 생성
 *  		   ----------> 객체 생성마다 따로 작동
 *  		   * 호출 : 객체명.메소드()
 *  		형식)
 *  			리턴형 메소드명(매개변수 목록) => 선언부
 *  			{
 *  				구현부
 *  			}
 *  			
 *  			- 리턴형 : 요청에 대한 결과값(1개만 사용 가능)
 *  					· 여러 개인 경우 : 클래스/배열
 *  					· 리턴형이 없는 경우 : void
 *  					기본형, 배열, 클래스
 *  			- 메소드명 : 알파벳이나 한글로 시작
 *  					· 숫자 사용 가능(단, 첫 글자 사용 불가)
 *  					· 키워드(예약어) 사용 불가(클래스명, 메소드명은 키워드가 아님)
 *  					· 공백 사용 불가
 *  					· 특수 문자 사용(_, $)
 *  					· 소문자로 시작(권장)
 *  					· 여러 단어 혼합 시 두번째 단어부터 첫글자는 대문자 사용
 *  					** 소프트웨어 이행
 *  						한글에 문제 발생 => 가급적이면 영문 사용 권장
 *  						윈도우 개발 => 서버 리눅스 사용
 *  						Full Stack		AWS
 *  			- 매개변수 : 사용자가 보내준 값 => 여러 개 있을 수 있음
 *						· 3개 이상일 경우 : 클래스/배열
 *
 *    			void 메소드명()
 *    			{
 *    				구현
 *    				return; // => 생략 가능(컴파일러가 자동 추가)
 *    				메소드 종료 => 원하는
 *    			}
 *    
 *    
 *    			void 메소드명()
 *    			{
 *    				if()
 *    					return;
 *   					// return 아래로 코드 사용 불가
 *   				else()
 *   					return;
 *   			}
 *   			=> 호출 : 메소드명();
 *   
 *   			데이터형이 클 수도 있음
 *   			int 메소드명()
 *   			{
 *   				return 정수값; // 데이터형 일치
 *   			}
 *   			=> 호출 : int[] arr=메소드명()			
 *   
 *   			class A
 *   			
 *   			A 메소드명()
 *   			{
 *   				A a=new A();
 *   				return a;
 *   			}
 *   			=> 호출 : A a=메소드명()
 *   		*** 메소드는 호출할 때마다 처음부터 return이 있는 곳까지 실행 => 종료 후 호출된 위치로 다시 이동
 *   			예) void aaa()
 *   				{
 *   					1
 *   					2
 *   					3
 *   					return;
 *   				}
 *   
 *   				void main()
 *   				{
 *   					4 // => 처음 시작점
 *   					5
 *   					aaa(); 
 *   					6
 *   					7
 *   					aaa();
 *   					8
 *   					9
 *   					return;
 *   				}
 *    
 *    				순서 : 4-5-(1-2-3)-6-7-(1-2-3)-8-9
 *    				=> 반복 제거, 재사용, 유지보수 용이(소스 간결) => 구조적 프로그램
 *    				객체 지향 프로그램 => 메소드
 *    			
 *    			프로그램 기획
 *    				벤치마킹 / 요구사항 분석
 *    			예)
 *    				숫자 야구 게임
 *    				// 멤버 변수 : com[], user[], s
 *    				컴퓨터 난수 발생 => 3개 => com[]
 *    				사용자 입력 => 3개 => user[]
 *    				비교 => com[], user[]
 *    				힌트 => user[], s, b
 *    				종료 => s
 *    
 */

import java.util.*;


class User
{
	// 5개의 정수 난수 발생 => 정렬 프로그램 제작 => 출력 메소드
	
	// 5개의 난수 발생
	int[] arr=new int[5];
	
	User()
	{
		for(int i=0; i<arr.length; i++)
		{
			arr[i]=(int)(Math.random()*100)+1;
		}
		System.out.println("정렬 전:"+Arrays.toString(arr));
	}
	
	void sort()
	{
		for(int i=0; i<arr.length; i++)
		{
			for(int j=i+1; j<arr.length; j++)
			{
				if(arr[i]>arr[j])
				{
					int temp=arr[i];
					arr[i]=arr[j];
					arr[j]=temp;
				}
			}
			
		}
	}
	
	void print()
	{
		System.out.println("정렬 후:"+Arrays.toString(arr));
	}
}


public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		User user=new User();
		user.sort();
		user.print();
	}

}
