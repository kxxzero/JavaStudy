/*
 *	연산자 / 피연산자(대상)
 *	예) 10 + 20 - 피연산자 : '10', '20' / 연산자 : '+'
 *		피연산자
 *			- 1개 : 단항연산자
 *					· 증감연산자 : 1개 증가 ++, 1개 감소 -- (반복문)
 *						예) int a=10;
 *							++a; => a=11;
 *					· 부정연산자 : boolean만 사용 가능 (서로 순서를 번갈아 가면서 하는 게임 등)
 *						예) boolean b=false;
 *							b=!b; => true;
 *					· 형변환 연산자 : 
 *						UpCasting : 작은 데이터형을 큰 데이터형으로 변경 = 자동형변환
 *							예) (int) 'A' => char → int (Upcasting)
 *						DownCasting : 큰 데이터형을 작은 데이터형으로 변경 = 강제형변환
 *							예) (int) 10.5 => double → int (Downcasting)
 *					· 기타 : (~ : 반전 연산자. 양수 → 음수 / 음수 → 양수) , . , []
 *			- 2개 : 이항연산자
 *					· 산술연산자 : +, -, *, /, %
 *						+ : 산술 연산 / 문자열 결합
 *						예) 5+6=11
 *							"5"+"6"="56"
 *							5+"7"+6="576"(문자열)
 *							"7"+7+7="777"
 *							7+7+"7"= "147" // 좌 → 우 순서로 연산
 *
 *							데이터형 자동 변경 = 자동형변환
 *							int + double = double(Upcasting)
 *
 *							int + long = long
 *							int + double = double
 *							long+double = double
 *
 *							char + char = int
 *							char + byte = int
 *							char + byte = int
 *		
 *						/ : 정수 ÷ 정수 = 정수
 *							10/3 = 3
 *							5/2 = 2
 *							* 0으로 나눌 경우에는 오류 발생 => 단위테스트(Junit)
 *
 *						% : 나누고 나머지 값(짝수, 홀수, 배수)
 *							10%3 = 1
 *							9%4 = 1
 *							10%2 = 0
 *							
 * 							* 부호는 앞 숫자의 부호를 따른다.
 * 								5%2 = 1
 * 								-5%2 = -1
 * 								5%-2 = 1
 * 								-5%-2 = -1
 *			
 *					· 쉬프트연산자 : <<, >> = 비트이동연산자
 *						10<<2 = 10×2² = 40
 *						11<<3 = 11×2³ = 88
 *						10>>2 = 10÷4
 *					· 비트연산자 : &, |, ^
 *						&()|()^ (다른 비트)
 *							   &(×)		|(+)	^(비트가 다르면 1, 같으면 0)
 *					-----------------------------------
 *						0 0     0		 0		0
 *					-----------------------------------
 *						0 1     0		 1		1
 *					-----------------------------------
 *						1 0     0		 1		1
 *					-----------------------------------
 *						1 1     1		 1		0
 *						
 *					예) 10 & 14
 *						 1010
 *						 1110
 *						-----&
 *						 1010 => 10
 *
 *					예) 21 & 6
 *						10101
 *						00110(110)
 *						-----&
 *						00100 => 4
 *					---------------	
 *
 *					예)	10 | 14
 *						 1010
 *						 1110
 *						-----|
 *						 1110 => 14
 *
 *					예)	21 | 6
 *						10101
 *						00110(110)
 *						-----|
 *						10111 => 23
 *					---------------
 *
 *					예)	10 ^ 14
 *						 1010
 *						 1110
 *						-----^
 *						 0100 => 4
 *
 *					예)	21 ^ 6
 *						10101
 *						00110(110)
 *						-----^
 *						10011 => 19
 *
 *					· 비교연산자 : ==, !=, <, >, <=, >=
 *						결과값 :  boolean (true/false)
 *						6==7 false
 *						6!=7 true
 *						6<7 true
 *						6>7 false
 *						6<=7 true
 *						6>=7 false
 *						=> 정수/실수/문자/논리 - 문자열은 계산할 수 없음
 *											 equals(), compare()
 *						같다(자바 : == / 오라클 : = / 자바스크립트 : ===)
 *						같지 않다(자바 : != / 오라클 : <> / 자바스크립트 : !==)
 *					· 논리연산자 : &&, ||
 *						&& : 직렬연산자
 *						|| : 병렬연산자
 *						---------------
 *						(조건)&&(조건)
 *						-----  -----
 *						  |		 |
 *						  --------
 *							  |
 *							 결과
 *		   									 &&		 ||
 *					-----------------------------------
 *						true	true     	true	true
 *					-----------------------------------
 *						true	false	    false	true
 *					-----------------------------------
 *						false	true		false	true
 *					-----------------------------------
 *						false	false		false	false
 *
 *					&& : 범위나 기간 포함 90 ~ 100 A 예약 기간
 *						예) score>=0 && score<=100
 *					|| : 범위를 벗어난 경우
 *
 *					· 대입연산자 : =, +=, -=, *=, /=, %= ...
 *									--------------------
 *										(복합대입연산자)
 *						예) int a = 10;
 *							int b = 20;
 *							int c = a+b;
 *							
 *							int a = 10;
 *							a++; // 한 개 증가
 *
 *							int a = 10;
 *							a += 10;
 *							a = a + 10; => a = 20;
 *
 *							int a = 100;
 *							a -= 10;
 *							a = a - 10; = > a = 90;
 *
 *							
 *							
 *			- 3개 : 삼항연산자
 */
public class 자바연산자 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(~100);
		System.out.println(Integer.toBinaryString(6)); // 2진법으로 바꿔줌
		
	}

}
