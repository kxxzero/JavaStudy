package com.sist.main;

/*
 * 	1. 객체 지향 프로그램
 * 		1) 데이터 보호 : 캡슐화
 * 			- 데이터 은닉화(private) : 메소드를 통해서 데이터에 접근(getter/setter : 읽기/쓰기)
 * 
 * 		2) 재사용 기법
 * 			- 반복 제거
 * 			- 상속(is-a) / 포함(has-a) => 클래스 크기 비교 가능
 * 			- 이미 사용중에 있음(신뢰성)
 * 			- 재사용(상속, 포함), 가독성(메소드), 견고성(예외처리)
 * 			- 기본 문법 - 8장 => 조립식(라이브러리 이용) - 9장
 * 			- 프로그램(네트워크, 데이터베이스)
 * 
 *  	3) 자바의 상속
 *  		- 재사용 목적으로 사용(기존의 만들어진 클래스를 확장해서 사용) => 상속(재사용, 기능 변경 후 사용) - 라이브러리
 *  		- 필요 시 사용
 *  			· 변경 후 사용 : 상속
 *  			· 있는 그대로 사용 : 포함
 *  		- 반복 코딩 제거 가능
 *  			예) 윈도우 => 변경 후 사용 / 있는 그대로 사용
 *  				public class Login extends JFrame
 *  									-----> 확장(이미 가지고 있는 것 외에 추가) => 상속
 *  				public class Login
 *  				{
 *  					JFrame fr=new JFrame(); // 포함 클래스
 *  				}
 *  		- 상속 특징
 *  			· 기존에 만들어진 클래스를 확장 후 새로운 클래스를 생성하여 사용
 *  				예)
 *  					class 게시판
 *  					{
 *  						글쓰기
 *  						목록 출력
 *  						상세 	보기
 *  						수정
 *  						삭제
 *  						검색
 *  					}
 *  					
 *  					// 확장
 *  					class 갤러리게시판 extends 게시판 // 상속을 받는 순간 게시판 클래스의 내용이 갤러리게시판 클래스에 그대로 생성됨
 *  					{
 *  						글쓰기 => (변경) => 이미지 업로드
 *  						목록 출력 => (변경) => 이미지 출력
 *  						상세 	보기
 *  						수정
 *  						삭제
 *  						검색
 *  					}
 *  
 *  					class 답변형게시판 extends 게시판
 *  					{
 *  						글쓰기
 *  						목록 출력
 *  						상세 	보기
 *  						수정
 *  						삭제
 *  						검색
 *  						=> 추가 답변
 *  					}
 *  
 *  					=> 음악 : 지니뮤직 => (상속) => 멜론
 *  					=> 영화 : CGV => (상속) => 롯데시네마 / 메가박스
 *  				
 *  			· 1개만 상속 가능(단일 상속) ↔ 여러 개 상속(다중 상속)
 *  			· 형식
 *  				A extends B => B가 가진 것(멤버 변수, 공유 변수, 메소드, 생성자, 초기화 블록 등) 중에서 가져옴(멤버 변수, 메소드)
 *  				-		  -
 *  				하위클래스	  상위클래스
 *  				
 *  				= 상속을 내리는 클래스 : 슈퍼 클래스, 상위 클래스, 베이스 클래스 => 부모 클래스
 *  				= 상속을 받는 클래스 : 서브 클래스, 하위 클래스, 파생 클래스 => 자식 클래스
 *  			·  상속의 예외 조건
 *  				= 생성자
 *  				= 초기화 블록
 *					= static : 상속이 아니라 공유할 수 있음
 *  				= 멤버 변수 : 상속 가능, 접근 불가능
 *  				=> 필요한 기능만 설정
 * 						멤버 변수를 사용하기 위한 방법 : private, protected
 *  			· 메소드의 기능 변경
 *  				★오버라이딩★
 *  				= 속도(최적화) => 가급적이면 상속해서 사용하지 않음
 *  				= 상속
 *  					class A 
 *  					class B extends A
 *  					B b=new B(); => A클래스 메모리 할당 => B클래스 메모리 할당
 *  					=> 스프링에서는 상속 개념이 거의 없음(일반 클래스로 사용 후 처리 => POJO)
 *  			· 자바의 모든 클래스 => Object 클래스로부터 상속 받음
 *  				= 라이브러리
 *  				= 사용자 정의 클래스
 *  				class A extends Object
 *  			· 상속을 받는 경우
 *  				= 변경 : 오버라이딩
 *  				= 추가 : 오버로딩
 *  				캡슐화 / 상속(클래스 상속보다는 인터페이스 상속), 포함 / 오버라이딩 / 오버로딩
 *  				=> 필수가 아닌 권장 사항
 *  				
 *  				예) 동물 - 인간
 *  					class 동물
 *  					class 인간 extends 동물
 *  					-----> 데이터형(사용자 정의) => 인간, 동물 데이터형도 포함
 *  					형식) 
 *  						동물 a=new 인간()
 *  						인간 b=new 인간()
 *  					*** 상속 : 서로 다른 클래스 여러 개를 모라서 관리
 *  								 
 */

class Super
{
	int a,b;
	void display() {}
}

class Sub extends Super
{
//	int a,b;
//	void display() {}
	public void aaa()
	{
		System.out.println("a="+a);
		System.out.println("b="+b);
		display();
	}
}

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
