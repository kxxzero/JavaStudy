
/*
 *	메소드 : 1개의 기능을 수행하는 명령문(변수, 제어문, 연산자)의 집합
 *	1. 메소드 구조
 *	   	[접근지정어][옵션] 리턴형 메소드명(매개변수 목록) => 선언문
 *		{
 *			구현문;
 *			return 값;
 *			=> void 선언 시 return 생략 가능(컴파일러에 의해 자동 추가)
 *			=> return 문장은 메소드의 종료(반드시 필요)
 *		}
 *		=> 호출 시 메소드는 처음부터 끝까지 실행을 하고 원래 호출한 위치로 이동
 *		예) void aaa()
 *			{
 *				문장 1 ② => ⑧
 *				문장 2 ③ => ⑨
 *				문장 3 ④ => ⑩
 *				return; ⑤ 메소드 종료 => 호출 위치로 돌아감 => ⑪
 *			}
 *			void main()
 *			{
 *				문장 4 ①
 *				aaa() // 호출
 *				문장 5 ⑥
 *				문장 6 ⑦
 *				aaa() // 호출
 *				문장 7 ⑫
 *			}
 *			=> 반복적인 문장이 있는 경우(반복 제거)
 *			=> 기능별로 분리하기 때문에 코드가 간결함 => 수정, 에러 처리 편리
 *			=> 다른 클래스와 연결 시에 주로 사용
 *			=> 객체 지향 : 변수, 메소드
 *			=> 클래스의 구성 : 변수, 메소드
 *			=> 메소드 존재 시 장점 : 분산 가능(여러 명이 동시 개발 가능)	
 *
 *	2. 리턴형 결정 : 사용자가 요청에 대한 결과값을 도출하는 것
 *		=> 리턴문은 1개만 설정 가능
 *			- 데이터 1개 : 기본형
 *			- 데이터 여러 개 : 배열/클래스 => 묶어서 전송(1개로 인식)
 *				예) class Movie{ => 사용자 정의 데이터형
 *						String title;
 *						String director;
 *						String actor;
 *						double score;
 *						int rank;
 *					}
 *		=> 결과값 유무
 *			- 결과값이 있는 경우 : 결과값 설정
 *				· 기본형
 *				· 배열
 *			- 결과값이 없는 경우(메소드 자체에서 처리) : void => 결과를 메소드에서 출력
 *		=> 리턴형과 결과값은 가급적이면 동일한 형태로 지정
 *			★ 리턴형 >=(크거나 같다) 결과값 => 예측을 못할 수도 있다 ★
 *			예) int(리턴형) 메소드명()
 *				{
 *					return 값(결과값);
 *				}
 *				★ boolean / String은 대체할 수 없음

 *	3. 매개변수 : 사용자로부터 요청을 받은 값
 *		예)
 *			로그인 요청 => ID/PWD
 *			아이디 체크 => ID
 *			우편번호 검색 => 동/읍/면
 *			영화 검색 => 영화명
 *			=> 여러 개 사용 가능
 *			=> 가급적이면 매개변수는 적게 사용하는 것을 권장(3개 이상일 경우 배열/클래스 사용 추천)
 *			=> 예측이 어려운 경우	: 가변 매개변수(...) 사용
 *
 *	4. 메소드명 : 식별자 이용(변수 명명 규칙와 동일)
 *			=> 알파벳(운영 체제(윈도우, 리눅스, 맥 => 소프트웨어 이식)에 영향이 없기 때문에 권장), 한글 시작 
 *			=> 알파벳 대소문자 구분
 *			=> 숫자 사용 가능(단, 첫 글자 사용 불가)
 *			=> 특수 문자 사용 가능(_, &만 사용 가능)
 *			=> 키워드(예약어 : 변수명, 메소드명, 클래스명 등) 사용 불가
 *			=> 공백 사용 불가
 *			=> 메소드명 길이(length) 제한 없음(10글자 이내 권장)
 *			=> 여러 단어를 합칠 시 언더바(_)나 각 글자의 첫글자는 대문자(헝거리언식 표기법)로 구분
 *			=> 소문자로 시작(권장 사항)
 *		=====> 변수(소문자로 시작) / 상수(대문자만 사용) / 메소드(소문자로 시작) / 클래스(대문자로 시작) / 인터페이스 / 열거형에도 모두 적용되는 사항
 *
 *	5. 호출 => 실행 과정
 *		int max(int a, int b)
 *		{
 *			return a>b?a:b
 *		}
 *		=> int max=max(10,20) => a=10; b=20;
 *			| 크거나 같도록(int, double, long)
 *		void max(int a, int b)
 *		{
 *			System.out.println(a>b?a:b);
 *		}
 *		=> max(10,20) => 받아서 저장하는 값이 없음
 *
 *	6. 메소드 유형
 *		리턴형 	매개변수
 *	--------------------
 *		O		O
 *		=> String
 *		   String substring(int begin)
 *		   String substring(int begin, int end)
 *	--------------------> 메소드명 동일, 매개변수가 다름 => 오버로딩
 *		O		X
 *		=> Math
 *		   double random() => 임의의 데이터를 추출 // 0.0 ~ 0.99
 *	--------------------
 *		X		O
 *		=> 출력 담당
 *		   void println(String s)
 *	--------------------
 *		X		X
 *		=> 빈도 수 거의 없음
 *	--------------------> void(Insert, Update, Delete) // 파일 값 추가, 수정, 삭제 등
 *		void println() => 다음 줄에 출력
 *		- 사용자 정의
 *		- 라이브러리 => 어떤 기능, 원형(리턴형, 매개변수)
 *			CBD(Component : 기능이 있는 클래스) : 자바 형식(조립식)
 *
 *	프로그램
 *	1) 입력 : 사용자로부터 전송 => 매개변수
 *		=> Scanner, BufferedReader(예외 처리, 입출력), Random
 *		=> 윈도우, 웹 => 입력 창 => 버튼 / 엔터
 *		  ----------
 *			<input type=text>
 *			<input type=password>
 *			<input type=button>
 *	2) 처리(요청 처리)
 *		= 결과값이 있는 경우 => 출력하는 메소드
 *		= 결과값이 없는 경우 => 여러 개로 나눠서 처리
 */

// 매개 변수(X), 리턴형(X) => 자체 출력
public class 메소드_1 {
	
//	static int a=10;
	static int aaa()
	{
		int a=100;
		return a;
	}

	
	// 구구단 전체
	static void gugudan()
	{
		for(int i=1; i<=9; i++)
		{
			for(int j=2; j<=9; j++)
			{
				System.out.printf("%2d*%2d=%2d\t", j, i, j*i);
			}
			System.out.println();
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a=aaa(); // 변수 a는 사라짐
		System.out.println("a="+a);
		
		gugudan();
	}

}
