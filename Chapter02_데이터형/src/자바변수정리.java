/*
 *	자바 => 형식
 *	1) 변수 : 한 개의 데이터를 저장할 메모리 공간의 이름
 *		변수 선언 : 데이터형 변수명; / 오라클 : 변수 데이터형;
 *		변수 초기값
 *		1. 자바에서 제공하는 데이터형(기본형)
 *			- 정수형
 *				· byte: 1byte = 8bit(2진법 : 0,1) [범위 : -128 ~ 127]
 *					=> 파일 읽기, 쓰기, 업로드, 다운로드, 네트워크 통신
 *				· int: 4byte = 32bit
 *					=> 가장 많이 사용되는 정수의 기본형(default)
 *				· long: 8byte = 64bit
 *					=> 빅데이터(라이브러리), 금융권
 *				* int와 long형을 구분하는 방법 : 100L(l) 'L'의 유무에 따라 구분
 *			- 실수형
 *				· float: 4byte [범위 : 소수점 이하 6자리]
 *					=> 10.7F(f)
 *				· double : 8byte [범위 : 소수점 이하 15자리]
 *					=> 가장 많이 사용되는 실수의 기본형(default) 10.5D(d) - 'D' 생략 가능
 *			- 문자형
 *				· char: 2byte [범위 : 0 ~ 65535 (모든 나라의 언어 사용이 가능)]
 *					=> Unicode(한글은 1글자당 2byte), 문자 한 개당 해당하는 번호가 있기 때문에 char은 연산 처리가 되면 정수로 변경된다.
 *				* 다른 데이터형끼리 연산하는 방법
 *					10 + 10.5 => 자바에서는 항상 같은 데이터형만 연산이 가능
 *					10.0 + 10.5 => 작은 데이터형이 큰 데이터형으로 변경하여 연산 - 자동 형변환
 *					'A' + 10.5 => 65.0 + 10.5 = 75.5
 *			- 논리형
 *				· boolean: 계산용이 아님 => true/false만 저장이 가능(조건문)
 *			--------------------
 *			- 참조형(사용자 정의) => 배열 / 클래스
 *
 *			※ 데이터형 크기(boolean 제외)
 *			byte < char < int < long < float < double
 *			
 *			* 연산처리(결과값은 가장 큰 데이터형이 결과값)
 *				byte + int + long = long
 *				int + float + double = double
 *				byte + char = int
 *				※ int 이하 데이터형의 연산 결과값은 int(int 이하 데이터형의 범위를 벗어날 수 있음)
 *
 *		2. 식별자(구분) : 같은 이름의 변수를 선언할 수 없음
 *			* 문법 사항
 *			- 알파벳이나 한글로 시작
 *				=> 국어 점수, kor
 *			- 알파벳의 경우 대소문자 구분
 *				=> kor,	Kor, KOR
 *			- 숫자 사용이 가능 (단 앞에 사용 금지)
 *				=> 3b, 35g (X) / b3, g35 (O)
 *			- 변수의 개수는 제한이 없음(보통 3~7 글자)
 *			- 특수 문자 사용 가능
 *				=> _, $($는 사용 빈도가 낮음)
 *				* 임시변수나 단어가 두 개 이상일 때 언더바(_) 사용
 *			- 키워드는 사용 불가능
 *				=> int, double, char...
 *			- 변수에 공백 사용 불가능
 *
 *	2) 변수 선언
 *		데이터형 변수명;
 *
 *	3) 같은 데이터형 여러 개
 *		- 정수 : int a, b, c, d
 *		- 논리 : boolean 
 *
 *	4) 상수 선언 : 변경할 수 없다.
 *		final int A = 100; // 'final' 이 붙으면 상수, 상수명은 대문자로 설정
 *		int b = 200;
 *
 *
 *		
 * 
 */

public class 자바변수정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println((int)'0'); // 문자 '0' = 48, 'A' = 65, 'a'=97
		
		byte b1 = 10;
		byte b2 = 20;
		byte b3 = (byte)(b1+b2);
		
		System.out.println(b3);
	}

}
